// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/tools/jwt/app/configmap_updater.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockconfigMapUpdater is a mock of configMapUpdater interface
type MockconfigMapUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockconfigMapUpdaterMockRecorder
}

// MockconfigMapUpdaterMockRecorder is the mock recorder for MockconfigMapUpdater
type MockconfigMapUpdaterMockRecorder struct {
	mock *MockconfigMapUpdater
}

// NewMockconfigMapUpdater creates a new mock instance
func NewMockconfigMapUpdater(ctrl *gomock.Controller) *MockconfigMapUpdater {
	mock := &MockconfigMapUpdater{ctrl: ctrl}
	mock.recorder = &MockconfigMapUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconfigMapUpdater) EXPECT() *MockconfigMapUpdaterMockRecorder {
	return m.recorder
}

// GetConfigMap mocks base method
func (m *MockconfigMapUpdater) GetConfigMap(ctx context.Context, ns, name string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMap", ctx, ns, name)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap
func (mr *MockconfigMapUpdaterMockRecorder) GetConfigMap(ctx, ns, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockconfigMapUpdater)(nil).GetConfigMap), ctx, ns, name)
}

// UpdateConfigMap mocks base method
func (m *MockconfigMapUpdater) UpdateConfigMap(ctx context.Context, configMap *v1.ConfigMap) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigMap", ctx, configMap)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigMap indicates an expected call of UpdateConfigMap
func (mr *MockconfigMapUpdaterMockRecorder) UpdateConfigMap(ctx, configMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigMap", reflect.TypeOf((*MockconfigMapUpdater)(nil).UpdateConfigMap), ctx, configMap)
}
