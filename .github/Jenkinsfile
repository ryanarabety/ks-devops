pipeline {
  agent {
    node {
      label 'go-builder'
    }
  }

  options {
      parallelsAlwaysFailFast()
  }

  stages {
    stage('Code check') {
      parallel {
        stage('Lint') {
          agent none
          steps {
            container('golangci') {
              sh '''
              go mod tidy
              if [ -n "$(git status --porcelain)" ]; then
                echo 'To fix this check, run "go mod tidy"'
                git status # Show the files that failed to pass the check.
                exit 1
              fi
              '''
              sh 'golangci-lint run ./... -v'
            }
          }
        }

        stage('Test') {
          agent none
          steps {
            container('go') {
              sh 'make test'

              withCredentials([string(credentialsId: 'codecov', variable: 'VARIABLE')]) {
                sh '''
                curl -Os https://uploader.codecov.io/v0.3.1/linux/codecov
                chmod +x codecov
                ./codecov -t ${VARIABLE} --flags unittests --name codecov-umbrella --nonZero --pr $CHANGE_ID --file coverage.out
                '''
              }
            }
          }
        }

        stage('License') {
          agent none
          steps {
            container('skywalking-eyes') {
              sh 'license-eye header check'
            }
          }
        }
      }
    }

    stage('Docker Login') {
      when {
        changeRequest target: 'master'
      }
      steps {
        container('base') {
          withCredentials([usernamePassword(credentialsId: 'gh', passwordVariable: 'PASSWORDVARIABLE' ,usernameVariable : 'USERNAMEVARIABLE')]) {
            sh 'docker login ghcr.io -u$USERNAMEVARIABLE -p$PASSWORDVARIABLE'
          }
        }
      }
    }

    stage('Build Image') {
      parallel {
        stage('Build') {
          agent none
          steps {
            container('base') {
              sh 'docker build . -f config/dockerfiles/apiserver/Dockerfile -t ghcr.io/kubesphere-sigs/devops-apiserver:pr-$CHANGE_ID'
            }
          }
        }

        stage('Build Controller') {
          agent none
          steps {
            container('base') {
              sh 'docker build . -f config/dockerfiles/controller-manager/Dockerfile -t ghcr.io/kubesphere-sigs/devops-controller:pr-$CHANGE_ID'
            }
          }
        }

        stage('Build Tool') {
          agent none
          steps {
            container('base') {
              sh 'docker build . -f config/dockerfiles/tools/Dockerfile -t ghcr.io/kubesphere-sigs/devops-tools:pr-$CHANGE_ID'
            }
          }
        }
      }
    }

    stage('Push Image') {
      when {
        changeRequest target: 'master'
      }
      steps {
        container('base') {
          sh 'docker push ghcr.io/kubesphere-sigs/devops-apiserver:pr-$CHANGE_ID'

          sh 'docker push ghcr.io/kubesphere-sigs/devops-controller:pr-$CHANGE_ID'

          sh 'docker push ghcr.io/kubesphere-sigs/devops-tools:pr-$CHANGE_ID'
        }
      }
    }
  }
}
